//design.v

module sorter (
    input [7:0] A, B, C, D, E, F, G, H,
    output reg [7:0] A_sorted, B_sorted, C_sorted, D_sorted, E_sorted, F_sorted, G_sorted, H_sorted
);
    reg [7:0] array [7:0];
    reg [7:0] temp;
    integer i, j;

    always @(*) begin
        
        array[0] = A;
        array[1] = B;
        array[2] = C;
        array[3] = D;
        array[4] = E;
        array[5] = F;
        array[6] = G;
        array[7] = H;

        
        for (i = 0; i < 8; i = i + 1) begin
            for (j = 0; j < 8-i-1; j = j + 1) begin
                if (array[j] > array[j+1]) begin
                    temp = array[j];
                    array[j] = array[j+1];
                    array[j+1] = temp;
                end
            end
        end

        
        A_sorted = array[0];
        B_sorted = array[1];
        C_sorted = array[2];
        D_sorted = array[3];
        E_sorted = array[4];
        F_sorted = array[5];
        G_sorted = array[6];
        H_sorted = array[7];
    end
endmodule


//interface.sv

interface sorter_if();
    logic [7:0] A, B, C, D, E, F, G, H;
    logic [7:0] A_sorted, B_sorted, C_sorted, D_sorted, E_sorted, F_sorted, G_sorted, H_sorted;
endinterface

//top module 

module topmodule;
    testbench tb();
endmodule


//trestbench 
module testbench;
    // Declare inputs and outputs
    reg [7:0] A, B, C, D, E, F, G, H;
    wire [7:0] A_sorted, B_sorted, C_sorted, D_sorted, E_sorted, F_sorted, G_sorted, H_sorted;

    // Instantiate the DUT
    sorter dut (
        .A(A), .B(B), .C(C), .D(D),
        .E(E), .F(F), .G(G), .H(H),
        .A_sorted(A_sorted), .B_sorted(B_sorted), .C_sorted(C_sorted), 
        .D_sorted(D_sorted), .E_sorted(E_sorted), .F_sorted(F_sorted),
        .G_sorted(G_sorted), .H_sorted(H_sorted)
    );

    initial begin
        // Dump file setup for waveform
        $dumpfile("dump.vcd");
        $dumpvars(0, testbench);

        // Test case 1
        A = 8'h10; B = 8'h20; C = 8'h30; D = 8'h40;
        E = 8'h50; F = 8'h60; G = 8'h70; H = 8'h80;
        #1; // Wait for combinational logic to settle
        display_results;

        // Test case 2
        A = 8'h80; B = 8'h70; C = 8'h60; D = 8'h50;
        E = 8'h40; F = 8'h30; G = 8'h20; H = 8'h10;
        #1; // Wait for combinational logic to settle
        display_results;

        // Test case 3
        A = 8'h30; B = 8'h10; C = 8'h50; D = 8'h20;
        E = 8'h40; F = 8'h80; G = 8'h60; H = 8'h70;
        #1; // Wait for combinational logic to settle
        display_results;

        // Finish simulation
        $finish;
    end

    task display_results;
        $display("Input: %h %h %h %h %h %h %h %h", A, B, C, D, E, F, G, H);
        $display("Output: %h %h %h %h %h %h %h %h", A_sorted, B_sorted, C_sorted, D_sorted, E_sorted, F_sorted, G_sorted, H_sorted);

        // Assertion for correctness
        assert(A_sorted <= B_sorted && B_sorted <= C_sorted && C_sorted <= D_sorted &&
               D_sorted <= E_sorted && E_sorted <= F_sorted && F_sorted <= G_sorted &&
               G_sorted <= H_sorted) else $fatal("Sorting failed!");
    endtask
endmodule


